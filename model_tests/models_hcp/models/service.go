package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Service service

swagger:model Service
*/
type Service struct {

	/* name

	Required: true
	*/
	Name string `json:"name"`

	/* Parameters defined for the service
	 */
	Parameters []*ParameterDefinition `json:"parameters,omitempty"`

	/* version

	Required: true
	*/
	Version string `json:"version"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if err := m.Parameters[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Service) validateVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("version", "body", string(m.Version)); err != nil {
		return err
	}

	return nil
}
