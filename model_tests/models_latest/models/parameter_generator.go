package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

/*ParameterGenerator Generator definition for a parameter

swagger:model ParameterGenerator
*/
type ParameterGenerator struct {
	Generate GeneratorType `json:"-"`

	/* id

	Required: true
	*/
	ID *string `json:"id"`
}

// Validate validates this parameter generator
func (m *ParameterGenerator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterGenerator) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ParameterGenerator) UnmarshalJSON(raw []byte) error {
	var data struct {
		Generate json.RawMessage `json:"generate,omitempty"`

		ID *string `json:"id"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	generate, err := UnmarshalGeneratorType(bytes.NewBuffer(data.Generate), runtime.JSONConsumer())
	if err != nil {
		return err
	}

	var result ParameterGenerator
	result.Generate = generate
	result.ID = data.ID
	*m = result
	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ParameterGenerator) MarshalJSON() ([]byte, error) {
	var b1, b2 []byte
	var err error
	b1, err = json.Marshal(struct {
		ID *string `json:"id"`
	}{
		ID: m.ID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Generate GeneratorType `json:"generate,omitempty"`
	}{
		Generate: m.Generate,
	})
	if err != nil {
		return nil, err
	}
	return swag.ConcatJSON(b1, b2), nil
}


